// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"kubecaptain/apis/internal/biz"
	"kubecaptain/apis/internal/conf"
	"kubecaptain/apis/internal/kube"
	"kubecaptain/apis/internal/kube/controller"
	"kubecaptain/apis/internal/server"
	"kubecaptain/apis/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *conf.Bootstrap, logger log.Logger) (*kratos.App, func(), error) {
	v, err := kube.NewKubeManager()
	if err != nil {
		return nil, nil, err
	}
	appUseCase, err := biz.NewAppUseCase(bootstrap, v)
	if err != nil {
		return nil, nil, err
	}
	appService := service.NewAppService(appUseCase)
	client, err := kube.NewKubeClient(v)
	if err != nil {
		return nil, nil, err
	}
	appCISettingUseCase, err := biz.NewAppCISettingUseCase(appUseCase, client)
	if err != nil {
		return nil, nil, err
	}
	appCISettingService := service.NewAppCISettingService(appCISettingUseCase)
	appCITaskUseCase, err := biz.NewAppCITaskUseCase(appUseCase, v)
	if err != nil {
		return nil, nil, err
	}
	appCITaskService := service.NewAppCITaskService(appCITaskUseCase)
	v2 := service.NewServices(appService, appCISettingService, appCITaskService)
	grpcServer := server.NewGRPCServer(bootstrap)
	httpServer := server.NewHTTPServer(bootstrap)
	applicationReconciler := controller.NewApplicationReconciler(v)
	v3 := kube.NewManagedReconciler(applicationReconciler)
	kubeManagerServer, err := server.NewKubeManagerServer(bootstrap, v, v3)
	if err != nil {
		return nil, nil, err
	}
	app := newApp(logger, v2, grpcServer, httpServer, kubeManagerServer)
	return app, func() {
	}, nil
}

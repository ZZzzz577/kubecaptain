// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: v1/ci_setting/ci_setting.proto

package setting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AppCISettingService_Get_FullMethodName   = "/kubecaptain.api.v1.app.AppCISettingService/Get"
	AppCISettingService_Apply_FullMethodName = "/kubecaptain.api.v1.app.AppCISettingService/Apply"
)

// AppCISettingServiceClient is the client API for AppCISettingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppCISettingServiceClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*AppCISetting, error)
	Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type appCISettingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppCISettingServiceClient(cc grpc.ClientConnInterface) AppCISettingServiceClient {
	return &appCISettingServiceClient{cc}
}

func (c *appCISettingServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*AppCISetting, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppCISetting)
	err := c.cc.Invoke(ctx, AppCISettingService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appCISettingServiceClient) Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AppCISettingService_Apply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppCISettingServiceServer is the server API for AppCISettingService service.
// All implementations must embed UnimplementedAppCISettingServiceServer
// for forward compatibility.
type AppCISettingServiceServer interface {
	Get(context.Context, *GetRequest) (*AppCISetting, error)
	Apply(context.Context, *ApplyRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAppCISettingServiceServer()
}

// UnimplementedAppCISettingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppCISettingServiceServer struct{}

func (UnimplementedAppCISettingServiceServer) Get(context.Context, *GetRequest) (*AppCISetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAppCISettingServiceServer) Apply(context.Context, *ApplyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (UnimplementedAppCISettingServiceServer) mustEmbedUnimplementedAppCISettingServiceServer() {}
func (UnimplementedAppCISettingServiceServer) testEmbeddedByValue()                             {}

// UnsafeAppCISettingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppCISettingServiceServer will
// result in compilation errors.
type UnsafeAppCISettingServiceServer interface {
	mustEmbedUnimplementedAppCISettingServiceServer()
}

func RegisterAppCISettingServiceServer(s grpc.ServiceRegistrar, srv AppCISettingServiceServer) {
	// If the following call pancis, it indicates UnimplementedAppCISettingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AppCISettingService_ServiceDesc, srv)
}

func _AppCISettingService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppCISettingServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppCISettingService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppCISettingServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppCISettingService_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppCISettingServiceServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppCISettingService_Apply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppCISettingServiceServer).Apply(ctx, req.(*ApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppCISettingService_ServiceDesc is the grpc.ServiceDesc for AppCISettingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppCISettingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kubecaptain.api.v1.app.AppCISettingService",
	HandlerType: (*AppCISettingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _AppCISettingService_Get_Handler,
		},
		{
			MethodName: "Apply",
			Handler:    _AppCISettingService_Apply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/ci_setting/ci_setting.proto",
}

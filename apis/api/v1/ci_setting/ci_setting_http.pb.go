// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: v1/ci_setting/ci_setting.proto

package setting

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAppCISettingServiceApply = "/kubecaptain.api.v1.app.AppCISettingService/Apply"
const OperationAppCISettingServiceGet = "/kubecaptain.api.v1.app.AppCISettingService/Get"

type AppCISettingServiceHTTPServer interface {
	Apply(context.Context, *ApplyRequest) (*emptypb.Empty, error)
	Get(context.Context, *GetRequest) (*AppCISetting, error)
}

func RegisterAppCISettingServiceHTTPServer(s *http.Server, srv AppCISettingServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/app/{name}/ci", _AppCISettingService_Get1_HTTP_Handler(srv))
	r.POST("/v1/app/{name}/ci", _AppCISettingService_Apply0_HTTP_Handler(srv))
}

func _AppCISettingService_Get1_HTTP_Handler(srv AppCISettingServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppCISettingServiceGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*GetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AppCISetting)
		return ctx.Result(200, reply)
	}
}

func _AppCISettingService_Apply0_HTTP_Handler(srv AppCISettingServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ApplyRequest
		if err := ctx.Bind(&in.Setting); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppCISettingServiceApply)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Apply(ctx, req.(*ApplyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type AppCISettingServiceHTTPClient interface {
	Apply(ctx context.Context, req *ApplyRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	Get(ctx context.Context, req *GetRequest, opts ...http.CallOption) (rsp *AppCISetting, err error)
}

type AppCISettingServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewAppCISettingServiceHTTPClient(client *http.Client) AppCISettingServiceHTTPClient {
	return &AppCISettingServiceHTTPClientImpl{client}
}

func (c *AppCISettingServiceHTTPClientImpl) Apply(ctx context.Context, in *ApplyRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/app/{name}/ci"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppCISettingServiceApply))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Setting, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppCISettingServiceHTTPClientImpl) Get(ctx context.Context, in *GetRequest, opts ...http.CallOption) (*AppCISetting, error) {
	var out AppCISetting
	pattern := "/v1/app/{name}/ci"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppCISettingServiceGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

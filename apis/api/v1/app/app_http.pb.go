// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: v1/app/app.proto

package app

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAppServiceGet = "/kubecaptain.apis.api.v1.app.AppService/Get"

type AppServiceHTTPServer interface {
	Get(context.Context, *IdentityRequest) (*App, error)
}

func RegisterAppServiceHTTPServer(s *http.Server, srv AppServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/apps", _AppService_Get0_HTTP_Handler(srv))
}

func _AppService_Get0_HTTP_Handler(srv AppServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IdentityRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppServiceGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*IdentityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*App)
		return ctx.Result(200, reply)
	}
}

type AppServiceHTTPClient interface {
	Get(ctx context.Context, req *IdentityRequest, opts ...http.CallOption) (rsp *App, err error)
}

type AppServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewAppServiceHTTPClient(client *http.Client) AppServiceHTTPClient {
	return &AppServiceHTTPClientImpl{client}
}

func (c *AppServiceHTTPClientImpl) Get(ctx context.Context, in *IdentityRequest, opts ...http.CallOption) (*App, error) {
	var out App
	pattern := "/api/v1/apps"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppServiceGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: v1/ci/ci.proto

package ci

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AppCIService_Get_FullMethodName   = "/kubecaptain.apis.api.v1.app.AppCIService/Get"
	AppCIService_Apply_FullMethodName = "/kubecaptain.apis.api.v1.app.AppCIService/Apply"
)

// AppCIServiceClient is the client API for AppCIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppCIServiceClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*AppCIConfig, error)
	Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type appCIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppCIServiceClient(cc grpc.ClientConnInterface) AppCIServiceClient {
	return &appCIServiceClient{cc}
}

func (c *appCIServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*AppCIConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppCIConfig)
	err := c.cc.Invoke(ctx, AppCIService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appCIServiceClient) Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AppCIService_Apply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppCIServiceServer is the server API for AppCIService service.
// All implementations must embed UnimplementedAppCIServiceServer
// for forward compatibility.
type AppCIServiceServer interface {
	Get(context.Context, *GetRequest) (*AppCIConfig, error)
	Apply(context.Context, *ApplyRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAppCIServiceServer()
}

// UnimplementedAppCIServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppCIServiceServer struct{}

func (UnimplementedAppCIServiceServer) Get(context.Context, *GetRequest) (*AppCIConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAppCIServiceServer) Apply(context.Context, *ApplyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (UnimplementedAppCIServiceServer) mustEmbedUnimplementedAppCIServiceServer() {}
func (UnimplementedAppCIServiceServer) testEmbeddedByValue()                      {}

// UnsafeAppCIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppCIServiceServer will
// result in compilation errors.
type UnsafeAppCIServiceServer interface {
	mustEmbedUnimplementedAppCIServiceServer()
}

func RegisterAppCIServiceServer(s grpc.ServiceRegistrar, srv AppCIServiceServer) {
	// If the following call pancis, it indicates UnimplementedAppCIServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AppCIService_ServiceDesc, srv)
}

func _AppCIService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppCIServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppCIService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppCIServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppCIService_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppCIServiceServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppCIService_Apply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppCIServiceServer).Apply(ctx, req.(*ApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppCIService_ServiceDesc is the grpc.ServiceDesc for AppCIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppCIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kubecaptain.apis.api.v1.app.AppCIService",
	HandlerType: (*AppCIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _AppCIService_Get_Handler,
		},
		{
			MethodName: "Apply",
			Handler:    _AppCIService_Apply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/ci/ci.proto",
}

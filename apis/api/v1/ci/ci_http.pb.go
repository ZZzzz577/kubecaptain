// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: v1/ci/ci.proto

package ci

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAppCIServiceApply = "/kubecaptain.apis.api.v1.app.AppCIService/Apply"
const OperationAppCIServiceGet = "/kubecaptain.apis.api.v1.app.AppCIService/Get"

type AppCIServiceHTTPServer interface {
	Apply(context.Context, *ApplyRequest) (*emptypb.Empty, error)
	Get(context.Context, *GetRequest) (*AppCIConfig, error)
}

func RegisterAppCIServiceHTTPServer(s *http.Server, srv AppCIServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/app/{name}/ci", _AppCIService_Get1_HTTP_Handler(srv))
	r.PUT("/v1/app/{name}/ci", _AppCIService_Apply0_HTTP_Handler(srv))
}

func _AppCIService_Get1_HTTP_Handler(srv AppCIServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppCIServiceGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*GetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AppCIConfig)
		return ctx.Result(200, reply)
	}
}

func _AppCIService_Apply0_HTTP_Handler(srv AppCIServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ApplyRequest
		if err := ctx.Bind(&in.Config); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAppCIServiceApply)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Apply(ctx, req.(*ApplyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type AppCIServiceHTTPClient interface {
	Apply(ctx context.Context, req *ApplyRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	Get(ctx context.Context, req *GetRequest, opts ...http.CallOption) (rsp *AppCIConfig, err error)
}

type AppCIServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewAppCIServiceHTTPClient(client *http.Client) AppCIServiceHTTPClient {
	return &AppCIServiceHTTPClientImpl{client}
}

func (c *AppCIServiceHTTPClientImpl) Apply(ctx context.Context, in *ApplyRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/app/{name}/ci"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAppCIServiceApply))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Config, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AppCIServiceHTTPClientImpl) Get(ctx context.Context, in *GetRequest, opts ...http.CallOption) (*AppCIConfig, error) {
	var out AppCIConfig
	pattern := "/v1/app/{name}/ci"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAppCIServiceGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
